(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{Fxmq:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return m}));var o=n("Fcif"),a=n("dV/x"),c=(n("mXGw"),n("/FXl")),r=n("TjRS"),i=n("ZFoC"),p=n("LYL2");n("aD51");const b=["components"],l={};void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!Object.prototype.hasOwnProperty.call(l,"__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/Container/Container.mdx"}});const d={_frontmatter:l},u=r.a;function m(e){let{components:t}=e,n=Object(a.a)(e,b);return Object(c.b)(u,Object(o.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"container"},"Container"),Object(c.b)("p",null,"容器。基础组件，提供各种布局效果。只能传一个子组件。"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"内部使用 flex 布局，搭配其他元素使用的时候需注意。")),Object(c.b)("h2",{id:"不同与-flutter-的点"},"不同与 flutter 的点"),Object(c.b)("p",null,"个人觉得前端的实现需要结合前端的场景和实现难度和用户感受，不需要可以的照抄 flutter，所以总有一些不太一样的地方。"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"约束的生效方式受限于前端实现，只能对自己约束，而不是子组件。"),Object(c.b)("li",{parentName:"ul"},"为使 Container 能更胜任前端的日常工作，增加了类似 overflow 的属性。"),Object(c.b)("li",{parentName:"ul"},"Continer 的盒模型会在某些条件下发生改变，比如设置了 ",Object(c.b)("inlineCode",{parentName:"li"},"alignment")," 属性后会变成 ",Object(c.b)("inlineCode",{parentName:"li"},"flex"),"。")),Object(c.b)("h2",{id:"usage"},"Usage"),Object(c.b)("h3",{id:"basic"},"Basic"),Object(c.b)(i.c,{__position:0,__code:'<Container width="100px" height="100px" color="#ececec">\n  展示一个方块\n</Container>',__scope:{props:n,DefaultLayout:r.a,Playground:i.c,Props:i.d,Container:p.a,DefaultLayout:r.a,_frontmatter:l},mdxType:"Playground"},Object(c.b)(p.a,{width:"100px",height:"100px",color:"#ececec",mdxType:"Container"},"展示一个方块")),Object(c.b)("h3",{id:"间距"},"间距"),Object(c.b)("p",null,"同时支持字符串和 object 写法"),Object(c.b)(i.c,{__position:1,__code:'<Container\n  width="100px"\n  height="100px"\n  color="#ececec"\n  margin={{ top: \'10px\' }}\n  padding="10px"\n>\n  展示一个方块\n</Container>',__scope:{props:n,DefaultLayout:r.a,Playground:i.c,Props:i.d,Container:p.a,DefaultLayout:r.a,_frontmatter:l},mdxType:"Playground"},Object(c.b)(p.a,{width:"100px",height:"100px",color:"#ececec",margin:{top:"10px"},padding:"10px",mdxType:"Container"},"展示一个方块")),Object(c.b)("h3",{id:"对齐"},"对齐"),Object(c.b)("p",null,"alignment 属性可以指定对齐方式。"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"这是一种妥协。web 前端用户倾向于把 Container 当 div 使用。当不传 alignment 属性的时候，Container 的盒模型是 ",Object(c.b)("inlineCode",{parentName:"p"},"block"),"，否则是 ",Object(c.b)("inlineCode",{parentName:"p"},"flex"),".")),Object(c.b)("h4",{id:"start"},"start"),Object(c.b)(i.c,{__position:2,__code:'<Container alignment="start" width="100px" height="100px" color="#ececec">\n  文字\n</Container>',__scope:{props:n,DefaultLayout:r.a,Playground:i.c,Props:i.d,Container:p.a,DefaultLayout:r.a,_frontmatter:l},mdxType:"Playground"},Object(c.b)(p.a,{alignment:"start",width:"100px",height:"100px",color:"#ececec",mdxType:"Container"},"文字")),Object(c.b)("h4",{id:"center"},"center"),Object(c.b)(i.c,{__position:3,__code:'<Container alignment="center" width="100px" height="100px" color="#ececec">\n  文字\n</Container>',__scope:{props:n,DefaultLayout:r.a,Playground:i.c,Props:i.d,Container:p.a,DefaultLayout:r.a,_frontmatter:l},mdxType:"Playground"},Object(c.b)(p.a,{alignment:"center",width:"100px",height:"100px",color:"#ececec",mdxType:"Container"},"文字")),Object(c.b)("h4",{id:"end"},"end"),Object(c.b)(i.c,{__position:4,__code:'<Container alignment="end" width="100px" height="100px" color="#ececec">\n  文字\n</Container>',__scope:{props:n,DefaultLayout:r.a,Playground:i.c,Props:i.d,Container:p.a,DefaultLayout:r.a,_frontmatter:l},mdxType:"Playground"},Object(c.b)(p.a,{alignment:"end",width:"100px",height:"100px",color:"#ececec",mdxType:"Container"},"文字")),Object(c.b)("h3",{id:"有子组件"},"有子组件"),Object(c.b)("p",null,"有子组件的时候， Container 会紧贴子组件。"),Object(c.b)(i.c,{__position:5,__code:'<Container color="#ececec">展示一个方块</Container>',__scope:{props:n,DefaultLayout:r.a,Playground:i.c,Props:i.d,Container:p.a,DefaultLayout:r.a,_frontmatter:l},mdxType:"Playground"},Object(c.b)(p.a,{color:"#ececec",mdxType:"Container"},"展示一个方块")),Object(c.b)("h3",{id:"没有子组件"},"没有子组件"),Object(c.b)("p",null,"没有子组件的时候，Container 会尽可能的大。"),Object(c.b)(i.c,{__position:6,__code:'<Container width="100px" height="100px">\n  <Container color="#ececec"></Container>\n</Container>',__scope:{props:n,DefaultLayout:r.a,Playground:i.c,Props:i.d,Container:p.a,DefaultLayout:r.a,_frontmatter:l},mdxType:"Playground"},Object(c.b)(p.a,{width:"100px",height:"100px",mdxType:"Container"},Object(c.b)(p.a,{color:"#ececec",mdxType:"Container"}))),Object(c.b)("h3",{id:"约束"},"约束"),Object(c.b)("p",null,"约束只对组件本身有效。"),Object(c.b)(i.c,{__position:7,__code:'<Container\n  constraints={{ maxWidth: \'100px\', maxHeight: \'100px\' }}\n  width="200px"\n  height="200px"\n  color="#ececec"\n>\n  100 的方块\n</Container>',__scope:{props:n,DefaultLayout:r.a,Playground:i.c,Props:i.d,Container:p.a,DefaultLayout:r.a,_frontmatter:l},mdxType:"Playground"},Object(c.b)(p.a,{constraints:{maxWidth:"100px",maxHeight:"100px"},width:"200px",height:"200px",color:"#ececec",mdxType:"Container"},"100 的方块")),Object(c.b)("h2",{id:"props"},"Props"),Object(c.b)(i.d,{of:p.a,mdxType:"Props"}))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!Object.prototype.hasOwnProperty.call(m,"__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/Container/Container.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-container-container-mdx-d346ac51a983fb2649fb.js.map